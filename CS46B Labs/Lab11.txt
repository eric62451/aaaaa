Eric Tam (Driver) / Joshua Warner (Scribe)

PART A
Step 1: Done
Step 2: Done
Step 3: Done
Step 4: Done
Step 5: Done
Step 6: Done
Step 7: Done
Step 8: Done

PART B
Step 1: 
import java.util.Random;

public class Trees2
{
   private static Random generator = new Random();

   public static void main(String[] args)
   {
       BinaryTree t = randomTree(6);
       System.out.println(t);
   }

   public static BinaryTree randomTree(int n)
   {
      if (n == 0) return new BinaryTree(1);
      if (n == 1) return new BinaryTree(n);
      int k = generator.nextInt(n);
      return new BinaryTree(n, new BinaryTree(k), new BinaryTree(n-k-1));
   }
}
Step 2: Done
Step 3: Done
Step 4: Done
Step 5: 
   public String toString(){
       return toString(root.left) + root.data.toString() + toString(root.right);
   }
   
   public static String toString(Node n){
       return n.data.toString();
   }
Step 6: Done
Step 7: Done
Step 8: Done
Step 9: Done


PART C
STep 1: 
import java.util.ArrayList;
import java.util.List;

public class Trees3
{
   public static void main(String[] args)
   {
      for (BinaryTree t : allTrees(6))
      {
         System.out.println(t);
      }
   }

   public static List<BinaryTree> allTrees(int n)
   {
      List<BinaryTree> l = new ArrayList<BinaryTree>();
      if (n == 0) 
      {
         l.add(new BinaryTree());         
      }
      else if (n == 1) 
      {
         l.add(new BinaryTree(1));
      }
      else
      {
         for (int k = 0; k < n; k++)
         {
            List<BinaryTree> l1 = allTrees(k);
            List<BinaryTree> l2 = allTrees(n-k-1);
            for (BinaryTree t1 : l1)
            {
               for (BinaryTree t2 : l2)
               {
                  l.add(new BinaryTree(n, t1,t2));
               }
            }         
         }
      }
      return l;
   }
}

Step 2: Done
Step 3: Done
Step 4: Done
Step 5: Done
Step 6: Done
Step 7: Done